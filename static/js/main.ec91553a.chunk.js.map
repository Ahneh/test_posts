{"version":3,"sources":["components/posts/Posts.module.css","redux/types.js","redux/utils.js","api/api.js","redux/postsReducer.js","core/icon/icons.js","core/button/IconButton.js","components/description/Description.js","core/modal/Modal.js","core/modal/useModal.js","components/posts/utils.js","core/text_field/CustomTextField.js","components/posts/Posts.js","components/posts/PostsContainer.js","redux/actions.js","App.js","redux/redux-store.js","index.js","components/description/Description.module.css","core/modal/Modal.module.css","core/button/IconButton.module.css","core/text_field/CustomTextField.module.css"],"names":["module","exports","ADD_POST","GET_POSTS","EDIT_POST","DELETE_POST","getCountRepeatedWord","array","countWords","forEach","x","getFormatedPost","id","idPost","post","descriptionsArray","body","toLowerCase","split","titleArray","title","getCountSameWordObj","el","countDescriptionWords","countTitleWords","getIndexSearchableObj","findIndex","instance","Axios","create","baseURL","withCredentials","postAPI","get","then","Response","data","slice","initialDescriptions","createAt","sliceArray","map","Date","now","initialStore","countSameWord","utils","postsReducer","state","action","type","types","posts","payload","formatedPosts","countSameWordArray","formatedPost","push","newPostId","newSlicedPost","postIndex","filter","ICONS","delete","color","Delete","htmlColor","send","Send","compare","CompareArrows","add","Add","list","ReplyAll","edit","Edit","close","Close","IconButton","className","onClick","icon","Tooltip","placement","c","button_icon","defaultProps","Description","update","deleting","options","toggle","isSame","setSame","Grid","item","xs","sm","md","Card","items","CardHeader","isChecked","items_title","subheader","items_date","date_and_time","moment","format","CardContent","Typography","variant","component","items_text","CardActions","buttonBlock","button_delete","Modal","isShowing","hide","children","clearModal","ReactDOM","createPortal","modal","modal_content","document","useModal","useState","setIsShowing","currentSumObj","obj","currentSum","Object","entries","key","value","currentWord","Math","min","CustomTextField","classNameBox","onChange","label","rowsMax","rows","size","TextField","input","multiline","filterOptions","fieldName","description","fields","Posts","descriptions","props","setPost","searchPostText","setSearchPostText","isEdit","setEdit","descriptionsPost","setDescriptionsPost","topSamePost","setTopSamePost","setOptions","setClear","useEffect","safeSearchText","includes","setDeletePost","deletePost","setUpdate","comparePost","currentItemPost","find","arrayFromCompare","compareObj","compareCounts","getThreeSamePost","itemDescription","compareSum","sort","sum1","sum2","topThreeSame","compareItemsValue","onChangePost","event","target","getPostItem","getOption","checkedOptions","FormControlLabel","control","Switch","name","checked","prevOptions","changeCheckedOptions","dialogs","none_scrolling","messageBox","container","alignItems","funcBlock","search","checkedBlock","justify","header_button_block","button_block","messageInput","input_new_title","input_new_description","button_send_block","editPost","addPost","spacing","messagesContent","PostsContainers","getPosts","this","addDescriptionActionCreator","editPostAC","deletePostAC","React","Component","PostsContainer","connect","postsPage","dispatch","App","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddelware","render","getElementById"],"mappings":"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","file":"static/js/main.ec91553a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Posts_dialogs__2rZbu\",\"none_scrolling\":\"Posts_none_scrolling__2_EPt\",\"messageBox\":\"Posts_messageBox__YiQE8\",\"messageInput\":\"Posts_messageInput__nLtXa\",\"input\":\"Posts_input__3sjUp\",\"input_new_description\":\"Posts_input_new_description__3Y-yV\",\"input_new_title\":\"Posts_input_new_title__2H33O\",\"checkedOptions\":\"Posts_checkedOptions__1nC6Z\",\"funcBlock\":\"Posts_funcBlock__26Lil\",\"button_send_block\":\"Posts_button_send_block__1e3xu\",\"button_all_posts\":\"Posts_button_all_posts__3_zFg\",\"button_block\":\"Posts_button_block__3AtKg\",\"checkedBlock\":\"Posts_checkedBlock__3zwST\",\"search\":\"Posts_search__eHZbA\",\"header_button_block\":\"Posts_header_button_block__3t3s9\"};","export const ADD_POST = \"ADD_POST\";\r\nexport const GET_POSTS = \"GET_POSTS\";\r\nexport const EDIT_POST = \"EDIT_POST\";\r\nexport const DELETE_POST = \"DELETE_POST\";\r\n","export const getCountRepeatedWord = (array) => {\r\n  let countWords = {};\r\n\r\n  array.forEach((x) => (countWords[x] = (countWords[x] || 0) + 1));\r\n\r\n  return countWords;\r\n};\r\nexport const getFormatedPost = (id, idPost, post) => ({\r\n  id,\r\n  idPost,\r\n  descriptionsArray: post.body.toLowerCase().split(\" \"),\r\n  titleArray: post.title.toLowerCase().split(\" \"),\r\n});\r\nexport const getCountSameWordObj = (el) => ({\r\n  idPost: el.idPost,\r\n  countDescriptionWords: getCountRepeatedWord(el.descriptionsArray),\r\n  countTitleWords: getCountRepeatedWord(el.titleArray),\r\n});\r\nexport const getIndexSearchableObj = (array, id) =>\r\n  array.findIndex((el) => el.id === id);\r\n","import Axios from \"axios\";\r\n\r\nconst instance = Axios.create({\r\n  baseURL: `https://jsonplaceholder.typicode.com/`,\r\n  withCredentials: true,\r\n});\r\n\r\nexport const postAPI = {\r\n  getPosts() {\r\n    return instance.get(`posts`).then((Response) => {\r\n      return Response.data.slice(0, 10);\r\n    });\r\n  },\r\n};\r\n","import * as types from \"./types\";\r\nimport * as utils from \"./utils\";\r\nimport { postAPI } from \"../api/api\";\r\nimport { getPostsAC } from \"./operation\";\r\n\r\nconst initialDescriptions = [\r\n  {\r\n    id: 0,\r\n    title: \"\",\r\n    body: \"\",\r\n    createAt: \"\",\r\n  },\r\n];\r\n\r\nconst sliceArray = initialDescriptions.map((el) => ({\r\n  id: Date.now(),\r\n  idPost: el.id,\r\n  descriptionsArray: el.body.toLowerCase().split(\" \"),\r\n  titleArray: el.title.toLowerCase().split(\" \"),\r\n}));\r\n\r\nconst initialStore = {\r\n  sliceArray: initialDescriptions,\r\n  countSameWord: sliceArray.map(utils.getCountSameWordObj),\r\n};\r\n\r\nconst postsReducer = (state = initialStore, action) => {\r\n  switch (action.type) {\r\n    case types.GET_POSTS: {\r\n      const { posts } = action.payload;\r\n      const formatedPosts = [];\r\n      const countSameWordArray = [];\r\n      let formatedPost = null;\r\n      posts.forEach((el) => {\r\n        formatedPost = utils.getFormatedPost(Date.now() + 1, el.id, el);\r\n        formatedPosts.push({\r\n          id: el.id,\r\n          body: el.body,\r\n          title: el.title,\r\n          createAt: new Date(),\r\n        });\r\n        countSameWordArray.push(utils.getCountSameWordObj(formatedPost));\r\n      });\r\n      return {\r\n        sliceArray: [...formatedPosts],\r\n\r\n        countSameWord: [...state.countSameWord, ...countSameWordArray],\r\n      };\r\n    }\r\n\r\n    case types.ADD_POST:\r\n      const { post } = action.payload;\r\n      const newPostId = Date.now();\r\n      const newSlicedPost = utils.getFormatedPost(\r\n        newPostId + 1,\r\n        newPostId,\r\n        post,\r\n      );\r\n\r\n      return {\r\n        sliceArray: [\r\n          ...state.sliceArray,\r\n          {\r\n            id: newPostId,\r\n            body: post.body,\r\n            title: post.title,\r\n            createAt: new Date(),\r\n          },\r\n        ],\r\n\r\n        countSameWord: [\r\n          ...state.countSameWord,\r\n          utils.getCountSameWordObj(newSlicedPost),\r\n        ],\r\n      };\r\n    case types.EDIT_POST: {\r\n      const { post } = action.payload;\r\n      const newSlicedPost = utils.getFormatedPost(\r\n        Date.now() + 1,\r\n        post.id,\r\n        post,\r\n      );\r\n      const postIndex = utils.getIndexSearchableObj(state.sliceArray, post.id);\r\n\r\n      return {\r\n        sliceArray: [\r\n          ...state.sliceArray.slice(0, postIndex),\r\n          { ...post, id: state.sliceArray[postIndex].id },\r\n          ...state.sliceArray.slice(postIndex + 1),\r\n        ],\r\n\r\n        countSameWord: [\r\n          ...state.countSameWord.filter((el) => el.idPost !== post.id),\r\n          utils.getCountSameWordObj(newSlicedPost),\r\n        ],\r\n      };\r\n    }\r\n    case types.DELETE_POST: {\r\n      const { post } = action.payload;\r\n      return {\r\n        sliceArray: [...state.sliceArray.filter((el) => el.id !== post.id)],\r\n        countSameWord: [\r\n          ...state.countSameWord.filter((el) => el.idPost !== post.id),\r\n        ],\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getPosts = () => (dispatch) => {\r\n  postAPI.getPosts().then((data) => {\r\n    dispatch(getPostsAC(data));\r\n  });\r\n};\r\n\r\nexport default postsReducer;\r\n","import {\r\n  Delete,\r\n  Edit,\r\n  CompareArrows,\r\n  ReplyAll,\r\n  Send,\r\n  Add,\r\n  Close,\r\n} from \"@material-ui/icons\";\r\n\r\nexport const ICONS = {\r\n  delete: (color) => <Delete htmlColor={color} />,\r\n  send: (color) => <Send htmlColor={color} />,\r\n  compare: (color) => <CompareArrows htmlColor={color} />,\r\n  add: (color) => <Add htmlColor={color} />,\r\n  list: (color) => <ReplyAll htmlColor={color} />,\r\n  edit: (color) => <Edit htmlColor={color} />,\r\n  close: (color) => <Close htmlColor={color} />,\r\n};\r\n","import { Tooltip } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ICONS } from \"../icon/icons\";\r\n\r\nimport React from \"react\";\r\nimport c from \"./IconButton.module.css\";\r\n\r\nconst IconButton = ({ className, onClick, title, icon, color }) => (\r\n  <Tooltip title={title} placement='top'>\r\n    <button className={`${className} ${c.button_icon}`} onClick={onClick}>\r\n      {ICONS[icon](color)}\r\n    </button>\r\n  </Tooltip>\r\n);\r\n\r\nIconButton.propTypes = {\r\n  className: PropTypes.oneOfType([\r\n    PropTypes.element,\r\n    PropTypes.object,\r\n    PropTypes.string,\r\n  ]),\r\n  onClick: PropTypes.func,\r\n  title: PropTypes.string,\r\n  icon: PropTypes.string,\r\n};\r\n\r\nIconButton.defaultProps = {\r\n  className: \"\",\r\n  onClick: null,\r\n  title: \"\",\r\n  icon: \"\",\r\n};\r\n\r\nexport default IconButton;\r\n","import React from \"react\";\r\nimport c from \"./Description.module.css\";\r\nimport IconButton from \"../../core/button/IconButton\";\r\nimport moment from \"moment\";\r\n\r\n//MUI\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core/\";\r\n\r\nconst Description = ({\r\n  post,\r\n  update,\r\n  deleting,\r\n  compare,\r\n  options,\r\n  toggle,\r\n  isSame,\r\n  setSame,\r\n}) => {\r\n  const updatePost = () => {\r\n    toggle();\r\n    update(post);\r\n  };\r\n  const deletePost = () => deleting(post);\r\n  const comparePost = () => compare(post);\r\n\r\n  return (\r\n    <Grid item xs={12} sm={6} md={4}>\r\n      <Card className={c.items}>\r\n        <CardHeader\r\n          title={\r\n            options[\"title\"].isChecked ? (\r\n              <h4 className={c.items_title}>{post.title}</h4>\r\n            ) : null\r\n          }\r\n          subheader={\r\n            options[\"createAt\"].isChecked ? (\r\n              <div className={c.items_date}>\r\n                <div className={c.date_and_time}>\r\n                  {post.createAt\r\n                    ? moment(post.createAt).format(\"MMMM Do YYYY, h:mm:ss a\")\r\n                    : \"\"}\r\n                </div>\r\n              </div>\r\n            ) : null\r\n          }\r\n        />\r\n\r\n        <CardContent>\r\n          <Typography variant='body2' color='textPrimary' component='span'>\r\n            {options[\"description\"].isChecked ? (\r\n              <div className={c.items_text}>{post.body}</div>\r\n            ) : null}\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n          {!isSame ? (\r\n            <div className={c.buttonBlock}>\r\n              <IconButton\r\n                title='Top same'\r\n                onClick={comparePost}\r\n                icon='compare'\r\n              />\r\n              <IconButton title='Edit' onClick={updatePost} icon='edit' />\r\n              <IconButton\r\n                title='Delete'\r\n                className={c.button_delete}\r\n                onClick={deletePost}\r\n                icon='delete'\r\n                color='red'\r\n              />\r\n            </div>\r\n          ) : (\r\n            <IconButton\r\n              title='All posts'\r\n              onClick={() => setSame(false)}\r\n              icon='list'\r\n            />\r\n          )}\r\n        </CardActions>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport IconButton from \"../button/IconButton\";\r\nimport c from \"./Modal.module.css\";\r\n\r\nconst Modal = ({ isShowing, hide, children, clearModal }) => {\r\n  const closeModal = () => {\r\n    clearModal();\r\n    hide();\r\n  };\r\n  return isShowing\r\n    ? ReactDOM.createPortal(\r\n        <>\r\n          <div className={c.modal}>\r\n            <div className={c.modal_content}>\r\n              <div className={c.buttonBlock}>\r\n                <IconButton\r\n                  title='Close'\r\n                  onClick={closeModal}\r\n                  color='red'\r\n                  icon='close'\r\n                />\r\n              </div>\r\n\r\n              {children}\r\n            </div>\r\n          </div>\r\n        </>,\r\n        document.body,\r\n      )\r\n    : null;\r\n};\r\n\r\nexport default Modal;\r\n","import { useState } from \"react\";\r\n\r\nconst useModal = () => {\r\n  const [isShowing, setIsShowing] = useState(false);\r\n\r\n  function toggle() {\r\n    setIsShowing(!isShowing);\r\n  }\r\n\r\n  return {\r\n    isShowing,\r\n    toggle,\r\n  };\r\n};\r\n\r\nexport default useModal;\r\n","const currentSumObj = (obj, el) => {\r\n  let currentSum = 0;\r\n  for (const [key, value] of Object.entries(obj)) {\r\n    const currentWord = el[key];\r\n\r\n    if (!!currentWord) {\r\n      currentSum += Math.min(currentWord, value);\r\n    }\r\n  }\r\n  return currentSum;\r\n};\r\n\r\nexport const compareCounts = (currentItemPost, arrayFromCompare) => ({\r\n  itemDescription: arrayFromCompare.map((el) => {\r\n    let compareItemsValue = currentSumObj(\r\n      currentItemPost.countDescriptionWords,\r\n      el.countDescriptionWords,\r\n    );\r\n    compareItemsValue += currentSumObj(\r\n      currentItemPost.countTitleWords,\r\n      el.countTitleWords,\r\n    );\r\n    return { idPost: el.idPost, compareSum: compareItemsValue };\r\n  }),\r\n});\r\n\r\nexport const topThreeSame = (compareObj, compareCounts) => {\r\n  const getThreeSamePost = compareCounts.itemDescription\r\n    .filter((item) => item.compareSum)\r\n    .sort((sum1, sum2) => sum2.compareSum - sum1.compareSum)\r\n    .slice(0, 2);\r\n\r\n  return compareObj.filter((el) =>\r\n    getThreeSamePost.find((item) => item.idPost === el.id),\r\n  );\r\n};\r\n","import { TextField } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport React from \"react\";\r\nimport c from \"./CustomTextField.module.css\";\r\n\r\nexport const CustomTextField = ({\r\n  className,\r\n  classNameBox,\r\n  onChange,\r\n  id,\r\n  value,\r\n  label,\r\n  rowsMax,\r\n  rows,\r\n  variant,\r\n  size,\r\n}) => (\r\n  <div className={classNameBox}>\r\n    <TextField\r\n      className={`${className} ${c.input}`}\r\n      onChange={onChange}\r\n      id={id}\r\n      value={value}\r\n      label={label}\r\n      rowsMax={rowsMax}\r\n      rows={rows}\r\n      multiline\r\n      variant={variant}\r\n      size={size}\r\n    />\r\n  </div>\r\n);\r\n\r\nCustomTextField.propTypes = {\r\n  className: PropTypes.oneOfType([\r\n    PropTypes.element,\r\n    PropTypes.object,\r\n    PropTypes.string,\r\n  ]),\r\n  classNameBox: PropTypes.oneOfType([\r\n    PropTypes.element,\r\n    PropTypes.object,\r\n    PropTypes.string,\r\n  ]),\r\n  onChange: PropTypes.func,\r\n  id: PropTypes.string,\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  rowsMax: PropTypes.number,\r\n  rows: PropTypes.number,\r\n  variant: PropTypes.string,\r\n  size: PropTypes.string,\r\n};\r\n\r\nCustomTextField.defaultProps = {\r\n  className: \"\",\r\n  onChange: null,\r\n  id: \"\",\r\n  value: \"\",\r\n  label: \"\",\r\n  rowsMax: 1,\r\n  rows: 1,\r\n  variant: \"outlined\",\r\n  size: \"medium\",\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Description from \"../description/Description\";\r\nimport c from \"./Posts.module.css\";\r\nimport Modal from \"../../core/modal/Modal\";\r\nimport useModal from \"../../core/modal/useModal\";\r\nimport IconButton from \"../../core/button/IconButton\";\r\nimport { compareCounts, topThreeSame } from \"./utils\";\r\nimport { CustomTextField } from \"../../core/text_field/CustomTextField\";\r\n\r\n//MUI\r\nimport { FormControlLabel, Switch, Grid } from \"@material-ui/core\";\r\n\r\nconst filterOptions = {\r\n  title: { isChecked: true, fieldName: \"Title\" },\r\n  description: { isChecked: true, fieldName: \"Description\" },\r\n  createAt: { isChecked: true, fieldName: \"Date add\" },\r\n};\r\n\r\nconst fields = { title: \"title\", body: \"body\" };\r\n\r\nconst Posts = ({ descriptions, countSameWord, ...props }) => {\r\n  const [post, setPost] = useState({\r\n    id: \"\",\r\n    [fields.title]: \"\",\r\n    [fields.body]: \"\",\r\n    createAt: \"\",\r\n  });\r\n  const [searchPostText, setSearchPostText] = useState(\"\");\r\n  const [isEdit, setEdit] = useState(false);\r\n  const [isSame, setSame] = useState(false);\r\n  const [descriptionsPost, setDescriptionsPost] = useState(descriptions);\r\n  const [topSamePost, setTopSamePost] = useState(descriptions);\r\n  const [options, setOptions] = useState(filterOptions);\r\n  const { isShowing, toggle } = useModal();\r\n\r\n  const setClear = () => {\r\n    setPost({ title: \"\", body: \"\" });\r\n    setEdit(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const safeSearchText = searchPostText.toLowerCase();\r\n    setDescriptionsPost(\r\n      descriptions.filter((el) =>\r\n        el.title.toLowerCase().includes(safeSearchText),\r\n      ),\r\n    );\r\n  }, [descriptions, searchPostText]);\r\n\r\n  const setDeletePost = (post) => {\r\n    props.deletePost(post);\r\n    setClear();\r\n  };\r\n  const setUpdate = (post) => {\r\n    setEdit(true);\r\n    setPost(post);\r\n  };\r\n\r\n  const addDescription = () => {\r\n    if (post.body && post.title !== \"\") {\r\n      props.addPost(post);\r\n    }\r\n    setClear();\r\n    toggle();\r\n  };\r\n  const editPost = () => {\r\n    props.editPost(post);\r\n    setClear();\r\n    setEdit(false);\r\n    toggle();\r\n  };\r\n  const comparePost = (post) => {\r\n    setSame(true);\r\n    const currentItemPost = countSameWord.find((el) => el.idPost === post.id);\r\n    const arrayFromCompare = countSameWord.filter(\r\n      (el) => el.idPost !== post.id,\r\n    );\r\n\r\n    setTopSamePost([\r\n      post,\r\n      ...topThreeSame(\r\n        descriptions,\r\n        compareCounts(currentItemPost, arrayFromCompare),\r\n      ),\r\n    ]);\r\n  };\r\n  const onChangeSearch = (event) => {\r\n    setSearchPostText(event.target.value);\r\n  };\r\n\r\n  const onChangePost = (event) => {\r\n    setPost({ ...post, [event.target.id]: event.target.value });\r\n  };\r\n  const getPostItem = (item) => (\r\n    <Description\r\n      options={options}\r\n      update={setUpdate}\r\n      deleting={setDeletePost}\r\n      compare={comparePost}\r\n      post={item}\r\n      key={item.id}\r\n      toggle={toggle}\r\n      isSame={isSame}\r\n      setSame={setSame}\r\n    />\r\n  );\r\n  const changeCheckedOptions = (event, key) => {\r\n    setOptions((prevOptions) => ({\r\n      ...prevOptions,\r\n      [key]: { ...prevOptions[key], isChecked: !prevOptions[key].isChecked },\r\n    }));\r\n  };\r\n  const getOption = (key, value) => (\r\n    <Grid item className={c.checkedOptions} key={value.fieldName}>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            id={value.fieldName}\r\n            name={value.fieldName}\r\n            checked={value.isChecked}\r\n            onChange={(event) => changeCheckedOptions(event, key)}\r\n            size='small'\r\n            color='primary'\r\n          />\r\n        }\r\n        label={value.fieldName}\r\n      />\r\n    </Grid>\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        !isShowing ? `${c.dialogs}` : `${c.dialogs} ${c.none_scrolling}`\r\n      }>\r\n      <div className={c.messageBox}>\r\n        <Grid container alignItems='center' className={c.funcBlock}>\r\n          <Grid item xs={8} sm={3} md={3}>\r\n            <CustomTextField\r\n              className={`${c.search}`}\r\n              onChange={onChangeSearch}\r\n              value={searchPostText}\r\n              label='Search'\r\n              size='small'\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={7} md={5} className={c.checkedBlock}>\r\n            <Grid container justify='center'>\r\n              {Object.entries(options).map((value) => getOption(...value))}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={2} sm={1} md={3} className={c.header_button_block}>\r\n            <div className={c.button_block}>\r\n              <IconButton icon='add' title='New Post' onClick={toggle} />\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Modal clearModal={setClear} isShowing={isShowing} hide={toggle}>\r\n          <div className={c.messageInput}>\r\n            <CustomTextField\r\n              classNameBox={c.input_new_title}\r\n              onChange={onChangePost}\r\n              id={fields.title}\r\n              value={post.title}\r\n              label='Title'\r\n              rowsMax={2}\r\n            />\r\n\r\n            <CustomTextField\r\n              classNameBox={c.input_new_description}\r\n              onChange={onChangePost}\r\n              id={fields.body}\r\n              value={post.body}\r\n              label='Description'\r\n              rowsMax={5}\r\n              rows={4}\r\n            />\r\n\r\n            <div className={c.button_send_block}>\r\n              <IconButton\r\n                title='Send'\r\n                onClick={isEdit ? editPost : addDescription}\r\n                color='#3f51b5'\r\n                icon='send'\r\n              />\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n        <Grid container spacing={1} className={c.messagesContent}>\r\n          {isSame\r\n            ? topSamePost.map(getPostItem)\r\n            : descriptionsPost.map(getPostItem)}\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import React from 'react'\r\nimport { addDescriptionActionCreator, editPostAC, deletePostAC } from '../../redux/operation'\r\nimport { getPosts } from '../../redux/postsReducer'\r\nimport Posts from './Posts'\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\nclass PostsContainers extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const { getPosts } = this.props;\r\n        getPosts()\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Posts\r\n                descriptions={this.props.descriptions}\r\n                countSameWord={this.props.countSameWord}\r\n                addPost={this.props.addDescriptionActionCreator}\r\n                editPost={this.props.editPostAC}\r\n                deletePost={this.props.deletePostAC}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        descriptions: state.postsPage.sliceArray,\r\n        countSameWord: state.postsPage.countSameWord,\r\n    }\r\n}\r\n\r\n\r\nconst PostsContainer = connect(mapStateToProps, { getPosts, addDescriptionActionCreator, editPostAC, deletePostAC })\r\n    (PostsContainers);\r\n\r\nexport default PostsContainer;","import * as types from \"./types\";\r\nexport const addDescriptionActionCreator = (post) => ({\r\n  type: types.ADD_POST,\r\n  payload: { post },\r\n});\r\n\r\nexport const getPostsAC = (posts) => ({\r\n  type: types.GET_POSTS,\r\n  payload: { posts },\r\n});\r\n\r\nexport const editPostAC = (post) => ({\r\n  type: types.EDIT_POST,\r\n  payload: { post },\r\n});\r\n\r\nexport const deletePostAC = (post) => ({\r\n  type: types.DELETE_POST,\r\n  payload: { post },\r\n});\r\n","import React from \"react\";\r\nimport PostsContainer from \"./components/posts/PostsContainer\";\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <PostsContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport postsReducer from \"./postsReducer\";\r\nimport thunkMiddelware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n  postsPage: postsReducer,\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddelware));\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Description_messages__38-2W\",\"items\":\"Description_items__2lKeH\",\"buttonBlock\":\"Description_buttonBlock__1oLhi\",\"items_text\":\"Description_items_text__JTXSJ\",\"items_title\":\"Description_items_title__wIth5\",\"items_date\":\"Description_items_date__1PwpA\",\"date_and_time\":\"Description_date_and_time__3CWEt\",\"button_delete\":\"Description_button_delete__wg6aI\",\"footer\":\"Description_footer__2fPzc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1pUjq\",\"modal_content\":\"Modal_modal_content__cqj3u\",\"buttonBlock\":\"Modal_buttonBlock__OzCWK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_icon\":\"IconButton_button_icon__2t2_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"CustomTextField_input__1WtAq\"};"],"sourceRoot":""}